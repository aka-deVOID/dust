#version 460
#extension GL_EXT_ray_tracing : require

layout(set = 0, binding = 1) uniform accelerationStructureEXT accelerationStructure;

layout(shaderRecordEXT) buffer Sbt {
    vec3 camera_view_col0;
    float near;
    vec3 camera_view_col1;
    float far;
    vec3 camera_view_col2;
    float strength;
    vec3 camera_position;
    float padding;
} sbt;

struct PhotonRayPayload {
    vec3 energy;
    float hitT;
};
layout(location = 0) rayPayloadEXT PhotonRayPayload photon;


void main() {
    const vec2 pixelNDC = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);
    const vec3 direction = vec3(0.0, 0.0, -1.0);

    const mat3 rotationMatrix = mat3(sbt.camera_view_col0, sbt.camera_view_col1, sbt.camera_view_col2);
    photon.energy = vec3(sbt.strength);
    traceRayEXT(
        accelerationStructure,
        gl_RayFlagsOpaqueEXT , // RayFlags
        0xFF, // CullMask
        1, // SBT offset, ray type index
        2, // SBT stride, number of ray types
        1, // missIndex
        rotationMatrix * vec3(pixelNDC, 0.0) + sbt.camera_position,     // ray origin
        sbt.near,           // ray min range
        rotationMatrix * direction, // direction
        sbt.far, // tmax
        0 // payload
    );
}
