#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_EXT_shader_explicit_arithmetic_types : require
#include "standard.glsl"

layout(shaderRecordEXT) buffer Sbt {
    vec3 camera_view_col0;
    float near;
    vec3 camera_view_col1;
    float far;
    vec3 camera_view_col2;
    float strength;
    vec3 camera_position;
    uint _padding;
} sbt;

struct PhotonRayPayload {
    vec3 energy;
    float hitT;
    vec3 normal;
};
layout(location = 0) rayPayloadEXT PhotonRayPayload photon;


void main() {
    vec2 jitter = texelFetch(blue_noise, ivec2((gl_LaunchIDEXT.xy - uvec2(16, 44) + pushConstants.rand) % textureSize(blue_noise, 0)), 0).xy;
    vec2 pixelNDC = (vec2(gl_LaunchIDEXT.xy) + jitter) / vec2(gl_LaunchSizeEXT.xy);
    pixelNDC = pixelNDC * 2.0 - 1.0;
    pixelNDC *= 800.0;
    pixelNDC.x -= 100.0;
    vec3 direction = -sunlight_config.direction.xyz;

    //const mat3 rotationMatrix = mat3(sbt.camera_view_col0, sbt.camera_view_col1, sbt.camera_view_col2);

    photon.energy = sunlight_config.solar_intensity.xyz;
    photon.hitT = 0.0;
    traceRayEXT(
        accelerationStructure,
        gl_RayFlagsOpaqueEXT, // RayFlags
        0xFF, // CullMask
        1, // SBT offset, ray type index
        4, // SBT stride, number of ray types
        -1, // missIndex
        vec3(pixelNDC.x, 0.0, pixelNDC.y) + sbt.camera_position,     // ray origin
        sbt.near,           // ray min range
        direction, // direction
        sbt.far, // tmax
        0 // payload
    );

    vec3 currentDir = direction; // Initial direction
    vec3 currentOrigin = vec3(pixelNDC.x, 0.0, pixelNDC.y) + sbt.camera_position; // Initial origin
    for (int i = 0; i < 1; i++) {
        vec3 noiseSample = texelFetch(blue_noise, ivec2((gl_LaunchIDEXT.xy + uvec2(12, 24) + pushConstants.rand) % textureSize(blue_noise, 0)), 0).xyz;
        // noiseSample is weighted on the z axis
        noiseSample = noiseSample * 2.0 - 1.0;

        const vec3 k = cross(vec3(0, 0, 1), photon.normal);
        const float cosTheta = dot(vec3(0, 0, 1), photon.normal);
        const float sinTheta = length(k);
        const vec3 crossed = cross(k, noiseSample);
        vec3 rotatedNoiseSample = noiseSample * cosTheta + crossed * sinTheta + k * dot(k, noiseSample) * (1.0 - cosTheta);

        if (dot(rotatedNoiseSample, vec3(photon.normal)) < 0.0) {
            rotatedNoiseSample = -rotatedNoiseSample;
        }
        vec3 currentOrigin = currentOrigin + currentDir * photon.hitT + photon.normal * 0.001;
        vec3 currentDir = rotatedNoiseSample;
        
        traceRayEXT(
            accelerationStructure,
            gl_RayFlagsOpaqueEXT , // RayFlags
            0xFF, // CullMask
            1, // SBT offset, ray type index
            4, // SBT stride, number of ray types
            -1, // missIndex
            currentOrigin,     // ray origin
            sbt.near,           // ray min range
            currentDir, // direction
            sbt.far, // tmax
            0 // payload
        );
    }
}
