#version 460
#include "standard.glsl"

layout(shaderRecordEXT) buffer Sbt {
    vec3 camera_view_col0;
    float near;
    vec3 camera_view_col1;
    float far;
    vec3 camera_view_col2;
    float _padding;
    vec3 camera_position;
    float tan_half_fov;
} sbt;
layout(location = 0) rayPayloadEXT uint8_t _ray_payload_not_used;


void main() {
    float hitT = imageLoad(u_depth, ivec2(gl_LaunchIDEXT.xy)).x;
    if (hitT == 0.0) {
        // Did not hit.
        return;
    }
    const vec2 pixelNDC = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / vec2(gl_LaunchSizeEXT.xy);

    vec2 pixelCamera = 2 * pixelNDC - 1;
    pixelCamera.y *= -1;
    pixelCamera.x *= float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
    pixelCamera *= sbt.tan_half_fov;

    const mat3 rotationMatrix = mat3(sbt.camera_view_col0, sbt.camera_view_col1, sbt.camera_view_col2);
       
    const vec3 rayWorldDir = rotationMatrix * vec3(pixelCamera, -1);

    const vec3 sunDir = vec3(0.0, 0.80114365, -0.5984721);
    const vec3 normalWorld = imageLoad(u_normal, ivec2(gl_LaunchIDEXT.xy)).xyz;
    vec3 hitLocation = hitT * rayWorldDir + sbt.camera_position + normalWorld * 0.01;
    // Shoot shadow ray
    traceRayEXT(
        accelerationStructure,
        gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT, // RayFlags
        0xFF, // CullMask
        2, // SBT offset, ray type index // Use the same intersection shader. We need higher-quality intersection for shadow rays as well.
        3, // SBT stride, number of ray types // TODO: Make this a shader constant
        1, // missIndex
        hitLocation,     // ray origin
        0.0,           // ray min range
        sunDir, // direction
        sbt.far, // tmax
        0 // payload
    );
}
